<%= f.fields_for :column_values do |g| %>
  <% column_values.order_by(order: 1, name: 1).each do |column_value| %>
    <% column = column_value.column %>
    <% next if column.blank? %>
    <%= render file: column.column_form_path, locals: { f: g, column: column, value: column_value, controller: true } %>
  <% end %>

  <% if true %>
    <div class="column-value-palette">
      <h3><%= t("ss.buttons.add") %></h3>
      <fieldset>
        <% form.columns.order_by(order: 1).each do |column| %>
          <butotn type="button" class="btn btn-outline-primary" data-form-id="<%= form.id %>" data-column-id="<%= column.id %>"><%= column.name %></butotn>
        <% end %>
      </fieldset>
      <div class="column-value-palette-error hide"></div>
    </div>
  <% end %>
<% end %>

<%= jquery do %>
  var $el = $(<%== "##{addon_id}".to_json %>);

  <% if true %>
  var resetOrder = function() {
    var count = $el.find(".column-value").length;

    var optionTemplate = "<option value=\":value\">:display</option>";
    var options = [];
    for (var i = 0; i < count; i++) {
      options.push(optionTemplate.replace(":value", i.toString()).replace(":display", (i + 1).toString()));
    };
    options.push(optionTemplate.replace(":value", count.toString()).replace(":display", "末尾"));

    $el.find(".column-value").each(function(index) {
      var $select = $(this).find(".column-value-controller-move-position");
      $select.html(options.join(""));
      $select.val(index);
    });
  };

  resetOrder();

  $el.on("change", ".column-value-controller-move-position", function(ev) {
    var $this = $(this);
    var val = $this.val();
    if (! val) {
      return;
    }

    var $columnValue = $this.closest(".column-value");

    var $columnValues = $el.find(".column-value");
    val = parseInt(val);
    if (val >= $columnValues.length) {
      var $moveTo = $($columnValues[$columnValues.length - 1]);
      $moveTo.after($columnValue);
    } else {
      var $moveTo = $($columnValues[val]);
      $moveTo.before($columnValue);
    }

    resetOrder();
  });

  $el.on("click", ".column-value-controller-move-up", function(ev) {
    ev.preventDefault();

    var $this = $(this);
    var $columnValue = $this.closest(".column-value");
    if (! $columnValue[0]) {
      return;
    }

    var $prev = $columnValue.prev(".column-value");
    if (! $prev[0]) {
      return;
    }

    $prev.before($columnValue);
    resetOrder();
  });

  $el.on("click", ".column-value-controller-move-down", function(ev) {
    ev.preventDefault();

    var $this = $(this);
    var $columnValue = $this.closest(".column-value");
    if (! $columnValue[0]) {
      return;
    }

    var $next = $columnValue.next(".column-value");
    if (! $next[0]) {
      return;
    }

    $next.after($columnValue);
    resetOrder();
  });

  $el.on("click", ".column-value-controller-delete", function(ev) {
    ev.preventDefault();

    var $this = $(this);
    var $columnValue = $this.closest(".column-value");
    if (! $columnValue[0]) {
      return;
    }

    if (! confirm(<%== t("ss.confirm.delete").to_json %>)) {
      return;
    }

    $columnValue.addClass("column-value-deleting").fadeOut().queue(function() {
      $columnValue.remove();
      resetOrder();
    });
  });

  $el.on("click", ".column-value-palette [data-form-id]", function() {
    var $self = $(this);
    var formId = $self.data("form-id");
    var columnId = $self.data("column-id");

    $self.closest("fieldset").attr("disabled", true);
    $self.closest(".column-value-palette").find(".column-value-palette-error").addClass("hide").html("");
    $.ajax({
      url: <%== cms_apis_form_column_new_path(id: ":formId", column_id: ":columnId").to_json %>.replace(/:formId/, formId).replace(/:columnId/, columnId),
      success: function(data, status, xhr) {
        $self.closest(".column-value-palette").before(data);
        SS.render();
        resetOrder();
      },
      error: function(xhr, status, error) {
        $self.closest(".column-value-palette").find(".column-value-palette-error").html(error).removeClass("hide");
      },
      complete: function(xhr, status) {
        $self.closest("fieldset").attr("disabled", false);
      }
    });
  });
  <% end %>

  $el.find('a.btn-file-upload').data('on-select', function($item) {
    $.colorbox.close();

    var fileId = $item.data('id');
    var humanizedName = $item.data('humanized-name');
    if (! fileId || ! humanizedName) {
      return;
    }

    var $element = $.colorbox.element();
    $element.siblings('input.file-id').val(fileId);
    $element.siblings('span.humanized-name').text(humanizedName);
    $element.siblings('.btn-file-delete').show();
  });

  $el.on('click', 'a.btn-file-delete', function(e) {
    var $this = $(this);
    $this.siblings('input.file-id').val('');
    $this.siblings('span.humanized-name').text('');
    $this.hide();

    e.preventDefault();
    return false;
  });
<% end %>
